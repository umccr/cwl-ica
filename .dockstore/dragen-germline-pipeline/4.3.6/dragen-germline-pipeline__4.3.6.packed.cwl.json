{
  "$graph": [
    {
      "class": "CommandLineTool",
      "id": "#dragen-germline__4.3.6.cwl",
      "label": "dragen-germline v(4.2.4)",
      "doc": "Documentation for dragen-germline v4.2.4\n",
      "hints": [
        {
          "dockerPull": "079623148045.dkr.ecr.ap-southeast-2.amazonaws.com/cp-prod/c3add40b-1be2-431d-a322-29529f7d2866:latest",
          "class": "DockerRequirement"
        },
        {
          "coresMin": 16,
          "ramMin": 240000,
          "class": "ResourceRequirement",
          "https://platform.illumina.com/rdf/ica/resources:tier": "standard",
          "https://platform.illumina.com/rdf/ica/resources:type": "fpga",
          "https://platform.illumina.com/rdf/ica/resources:size": "medium"
        }
      ],
      "requirements": [
        {
          "listing": [
            {
              "entryname": "$(get_script_path())",
              "entry": "#!/usr/bin/env bash\n\n# Fail on non-zero exit of subshell\nset -euo pipefail\n\n# Run partial reconfig\n/opt/edico/bin/dragen \\\\\n  --partial-reconfig HMM \\\\\n  --ignore-version-check true\n\n# Create directories\nmkdir --parents \\\\\n  \"$(get_ref_mount())\" \\\\\n  \"$(get_intermediate_results_dir())\" \\\\\n  \"$(inputs.output_directory)\"\n\n# untar ref data into scratch space\ntar \\\\\n  --directory \"$(get_ref_mount())\" \\\\\n  --extract \\\\\n  --file \"$(inputs.reference_tar.path)\"\n\n# Confirm either of fastq_list, fastq_list_rows, bam_input or cram_input is defined\nif [[ \"$(boolean_to_int(is_not_null(inputs.fastq_list)) + boolean_to_int(is_not_null(inputs.fastq_list_rows)) + boolean_to_int(is_not_null(inputs.bam_input)) + boolean_to_int(is_not_null(inputs.cram_input)))\" -ne \"1\" ]]; then\n  echo \"Please set one and only one of fastq_list, fastq_list_rows and bam_input for normal sample\" 1>&2\n  exit 1\nfi\n\n# Run dragen command and import options from cli\n\"$(get_dragen_bin_path())\" \"\\${@}\"\n"
            },
            "${\n  return generate_germline_mount_points(inputs);\n}\n"
          ],
          "class": "InitialWorkDirRequirement"
        },
        {
          "expressionLib": [
            "/*  Author:Alexis Lucattini */\n/*  For assistance on generation of typescript expressions */\n/*  In CWL, please visit our wiki page at https://github.com/umccr/cwl-ica/wiki/TypeScript */\n/*  Imports */\n/*  Functions */\nfunction get_script_path() {\n    /*\n    Abstract script path, can then be referenced in baseCommand attribute too\n    Makes things more readable.\n    */\n    return \"run-dragen-script.sh\";\n}\nfunction get_scratch_mount() {\n    /*\n    Return the path of the scratch directory space\n    */\n    return \"/scratch/\";\n}\nfunction get_intermediate_results_dir() {\n    /*\n    Get intermediate results directory as /scratch for dragen runs\n    */\n    return get_scratch_mount() + \"intermediate-results/\";\n}\nfunction get_name_root_from_tarball(basename) {\n    var tar_ball_regex = /(\\S+)\\.tar\\.gz/g;\n    var tar_ball_expression = tar_ball_regex.exec(basename);\n    if (tar_ball_expression === null) {\n        throw new Error(\"Could not get nameroot from \".concat(basename));\n    }\n    return tar_ball_expression[1];\n}\nfunction get_ref_path(reference_input_obj) {\n    /*\n    Get the reference path\n    */\n    return get_ref_mount() + get_name_root_from_tarball(reference_input_obj.basename) + \"/\";\n}\nfunction get_ref_mount() {\n    /*\n    Get the reference mount point\n    */\n    return get_scratch_mount() + \"ref/\";\n}\nfunction get_dragen_bin_path() {\n    /*\n    Get dragen bin path\n    */\n    return \"/opt/edico/bin/dragen\";\n}\nfunction get_dragen_eval_line() {\n    /*\n    Return string\n    */\n    return \"eval \\\"\" + get_dragen_bin_path() + \"\\\" '\\\"\\$@\\\"' \\n\";\n}\nfunction get_fastq_list_csv_path() {\n    /*\n    The fastq list path must be placed in working directory\n    */\n    return \"fastq_list.csv\";\n}\nfunction get_tumor_fastq_list_csv_path() {\n    /*\n    The tumor fastq list path must be placed in working directory\n    */\n    return \"tumor_fastq_list.csv\";\n}\nfunction get_ora_mv_files_script_path() {\n    /*\n    Get the ora mv files script path\n    */\n    return \"mv-ora-output-files.sh\";\n}\nfunction get_new_fastq_list_csv_script_path() {\n    /*\n    Get the new fastq list csv script path\n    */\n    return \"generate-new-fastq-list-csv.sh\";\n}\nfunction get_fastq_raw_md5sum_files_script_path() {\n    /*\n    Get the script path to generating the md5sum for each fastq gzip file\n    */\n    return \"generate-md5sum-for-fastq-raw-files.sh\";\n}\nfunction get_fastq_gz_file_sizes_script_path() {\n    /*\n    Get the script path to generating the filesizes for each fastq gzip file\n    */\n    return \"generate-file-sizes-for-fastq-gz-files.sh\";\n}\nfunction get_fastq_ora_md5sum_files_script_path() {\n    /*\n    Get the script path for generating the md5sum for each fastq ora file\n    */\n    return \"generate-md5sum-for-fastq-ora-files.sh\";\n}\nfunction get_fastq_ora_file_sizes_script_path() {\n    /*\n    Get the script path to generating the filesizes for each fastq gzip file\n    */\n    return \"generate-file-sizes-for-fastq-ora-files.sh\";\n}\nfunction get_normal_name_from_fastq_list_rows(fastq_list_rows) {\n    /*\n    Get the normal sample name from the fastq list rows object\n    */\n    /*\n    Check fastq list rows is defined\n    */\n    if (fastq_list_rows === undefined || fastq_list_rows === null) {\n        return null;\n    }\n    /*\n    Get RGSM value and return\n    */\n    return fastq_list_rows[0].rgsm;\n}\nfunction get_normal_name_from_fastq_list_csv(fastq_list_csv) {\n    /*\n    Get the normal name from the fastq list csv...\n    */\n    /*\n    Check file is defined\n    */\n    if (fastq_list_csv === undefined || fastq_list_csv === null) {\n        return null;\n    }\n    /*\n    Check contents are defined\n    */\n    if (fastq_list_csv.contents === null || fastq_list_csv.contents === undefined) {\n        return null;\n    }\n    /*\n    Confirm fastq list csv is of type File\n    */\n    if (fastq_list_csv.class !== \"File\") {\n        throw new Error(\"Could not confirm input fastq_list_csv is of type File\");\n    }\n    /*\n    Split contents by line\n    */\n    var contents_by_line = [];\n    fastq_list_csv.contents.split(\"\\n\").forEach(function (line_content) {\n        var stripped_line_content = line_content.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n        if (stripped_line_content !== \"\") {\n            contents_by_line.push(stripped_line_content);\n        }\n    });\n    var column_names = contents_by_line[0].split(\",\");\n    /*\n    Get RGSM index value (which column is RGSM at?)\n    */\n    var rgsm_index = column_names.indexOf(\"RGSM\");\n    /*\n    RGSM is not in index. Return null\n    */\n    if (rgsm_index === -1) {\n        return null;\n    }\n    /*\n    Get RGSM value of first row and return\n    */\n    return contents_by_line[1].split(\",\")[rgsm_index];\n}\nfunction get_normal_output_prefix(inputs) {\n    var _a, _b;\n    /*\n    Get the normal RGSM value and then add _normal to it\n    */\n    var normal_name = null;\n    var normal_re_replacement = /_normal$/;\n    /*\n    Check if bam_input is set\n    */\n    if (inputs.bam_input !== null && inputs.bam_input !== undefined) {\n        /* Remove _normal from nameroot if it already exists */\n        /* We dont want _normal_normal as a suffix */\n        return \"\".concat((_a = inputs.bam_input.nameroot) === null || _a === void 0 ? void 0 :_a.replace(normal_re_replacement, \"\"), \"_normal\");\n    }\n    /*\n    Check if cram_input is set\n    */\n    if (inputs.cram_input !== null && inputs.cram_input !== undefined) {\n        /* Remove _normal from nameroot if it already exists */\n        /* We dont want _normal_normal as a suffix */\n        return \"\".concat((_b = inputs.cram_input.nameroot) === null || _b === void 0 ? void 0 :_b.replace(normal_re_replacement, \"\"), \"_normal\");\n    }\n    /*\n    Check if fastq list file is set\n    */\n    if (inputs.fastq_list !== null && inputs.fastq_list !== undefined) {\n        normal_name = get_normal_name_from_fastq_list_csv(inputs.fastq_list);\n        if (normal_name !== null) {\n            return \"\".concat(normal_name, \"_normal\");\n        }\n    }\n    /*\n    Otherwise collect and return from schema object\n    */\n    normal_name = get_normal_name_from_fastq_list_rows(inputs.fastq_list_rows);\n    return \"\".concat(normal_name, \"_normal\");\n}\nfunction build_fastq_list_csv_header(header_names) {\n    /*\n    Convert lowercase labels to uppercase values\n    i.e\n    [ \"rgid\", \"rglb\", \"rgsm\", \"lane\", \"read_1\", \"read_2\" ]\n    to\n    \"RGID,RGLB,RGSM,Lane,Read1File,Read2File\"\n    */\n    var modified_header_names = [];\n    for (var _i = 0, header_names_1 = header_names; _i < header_names_1.length; _i++) {\n        var header_name = header_names_1[_i];\n        if (header_name.indexOf(\"rg\") === 0) {\n            /*\n            rgid -> RGID\n            */\n            modified_header_names.push(header_name.toUpperCase());\n        }\n        else if (header_name.indexOf(\"read\") === 0) {\n            /*\n            read_1 -> Read1File\n            */\n            modified_header_names.push(\"Read\" + header_name.charAt(header_name.length - 1) + \"File\");\n        }\n        else {\n            /*\n            lane to Lane\n            */\n            modified_header_names.push(header_name[0].toUpperCase() + header_name.substr(1));\n        }\n    }\n    /*\n    Convert array to comma separated strings\n    */\n    return modified_header_names.join(\",\") + \"\\n\";\n}\nfunction get_fastq_list_row_as_csv_row(fastq_list_row, row_order) {\n    var fastq_list_row_values_array = [];\n    /*  This for loop is here to ensure were assigning values in the same order as the header */\n    for (var _i = 0, row_order_1 = row_order; _i < row_order_1.length; _i++) {\n        var item_index = row_order_1[_i];\n        var found_item = false;\n        /*  Find matching attribute in this row */\n        for (var _a = 0, _b = Object.getOwnPropertyNames(fastq_list_row); _a < _b.length; _a++) {\n            var fastq_list_row_field_name = _b[_a];\n            var fastq_list_row_field_value = fastq_list_row[fastq_list_row_field_name];\n            if (fastq_list_row_field_value === null) {\n                /*\n                Item not found, add an empty attribute for this cell in the csv\n                */\n                continue;\n            }\n            /*  The header value matches the name in the item */\n            if (fastq_list_row_field_name === item_index) {\n                /*\n                If the field value has a class attribute then it's either read_1 or read_2\n                */\n                if (fastq_list_row_field_value.hasOwnProperty(\"class\")) {\n                    var fastq_list_row_field_value_file = fastq_list_row_field_value;\n                    /*\n                    Assert that this is actually of class file\n                    */\n                    if (fastq_list_row_field_value_file.class !== \"File\") {\n                        continue;\n                    }\n                    if (fastq_list_row_field_value_file.path !== null && fastq_list_row_field_value_file.path !== undefined) {\n                        /*\n                        Push the path attribute to the fastq list csv row if it is not null\n                        */\n                        fastq_list_row_values_array.push(fastq_list_row_field_value_file.path);\n                    }\n                    else {\n                        /*\n                        Otherwise push the location attribute\n                        */\n                        fastq_list_row_values_array.push(fastq_list_row_field_value_file.location);\n                    }\n                }\n                else {\n                    /*\n                    Push the string attribute to the fastq list csv row\n                    */\n                    fastq_list_row_values_array.push(fastq_list_row_field_value.toString());\n                }\n                found_item = true;\n                break;\n            }\n        }\n        if (!found_item) {\n            /*\n            Push blank cell if no item found\n            */\n            fastq_list_row_values_array.push(\"\");\n        }\n    }\n    /*\n    Convert to string and return as string\n    */\n    return fastq_list_row_values_array.join(\",\") + \"\\n\";\n}\nfunction generate_fastq_list_csv(fastq_list_rows) {\n    /*\n    Fastq list rows generation\n    */\n    var fastq_csv_file = {\n        class:\"File\",\n        basename:get_fastq_list_csv_path()\n    };\n    /*\n    Set the row order\n    */\n    var row_order = [];\n    /*\n    Set the array order\n    Make sure we iterate through all rows of the array\n    */\n    for (var _i = 0, fastq_list_rows_1 = fastq_list_rows; _i < fastq_list_rows_1.length; _i++) {\n        var fastq_list_row = fastq_list_rows_1[_i];\n        for (var _a = 0, _b = Object.getOwnPropertyNames(fastq_list_row); _a < _b.length; _a++) {\n            var fastq_list_row_field_name = _b[_a];\n            if (row_order.indexOf(fastq_list_row_field_name) === -1) {\n                row_order.push(fastq_list_row_field_name);\n            }\n        }\n    }\n    /*\n    Make header\n    */\n    fastq_csv_file.contents = build_fastq_list_csv_header(row_order);\n    /*\n    For each fastq list row,\n    collect the values of each attribute but in the order of the header\n    */\n    for (var _c = 0, fastq_list_rows_2 = fastq_list_rows; _c < fastq_list_rows_2.length; _c++) {\n        var fastq_list_row = fastq_list_rows_2[_c];\n        /*  Add csv row to file contents */\n        fastq_csv_file.contents += get_fastq_list_row_as_csv_row(fastq_list_row, row_order);\n    }\n    return fastq_csv_file;\n}\nfunction generate_germline_mount_points(inputs) {\n    /*\n    Create and add in the fastq list csv for the input fastqs\n    */\n    var e = [];\n    if (inputs.fastq_list_rows !== null) {\n        e.push({\n            \"entryname\":get_fastq_list_csv_path(),\n            \"entry\":generate_fastq_list_csv(inputs.fastq_list_rows)\n        });\n    }\n    if (inputs.fastq_list !== null) {\n        e.push({\n            \"entryname\":get_fastq_list_csv_path(),\n            \"entry\":inputs.fastq_list\n        });\n    }\n    /*\n    Return file paths\n    */\n    /*  @ts-ignore Type '{ entryname:string; entry:FileProperties; }[]' is not assignable to type 'DirentProperties[]' */\n    return e;\n}\nfunction generate_somatic_mount_points(inputs) {\n    /*\n    Create and add in the fastq list csv for the input fastqs\n    */\n    var e = [];\n    if (inputs.fastq_list_rows !== null) {\n        e.push({\n            \"entryname\":get_fastq_list_csv_path(),\n            \"entry\":generate_fastq_list_csv(inputs.fastq_list_rows)\n        });\n    }\n    if (inputs.tumor_fastq_list_rows !== null) {\n        e.push({\n            \"entryname\":get_tumor_fastq_list_csv_path(),\n            \"entry\":generate_fastq_list_csv(inputs.tumor_fastq_list_rows)\n        });\n    }\n    if (inputs.fastq_list !== null) {\n        e.push({\n            \"entryname\":get_fastq_list_csv_path(),\n            \"entry\":inputs.fastq_list\n        });\n    }\n    if (inputs.tumor_fastq_list !== null) {\n        e.push({\n            \"entryname\":get_tumor_fastq_list_csv_path(),\n            \"entry\":inputs.tumor_fastq_list\n        });\n    }\n    /*\n    Return file paths\n    */\n    /*  @ts-ignore Type '{ entryname:string; entry:FileProperties; }[]' is not assignable to type 'DirentProperties[]' */\n    return e;\n}\nfunction generate_transcriptome_mount_points(inputs) {\n    /*\n    Calls another function that generates mount points\n    */\n    return generate_germline_mount_points(inputs);\n}\n/*  Custom functions for dragen reference tarball build */\nfunction get_liftover_dir() {\n    /*  Hardcoded liftover directory in dragen 4.2 */\n    return \"/opt/edico/liftover/\";\n}\nfunction get_mask_dir() {\n    /*  Hardcoded mask directory in dragen 4.2 */\n    return \"/opt/edico/fasta_mask/\";\n}\nfunction get_ref_scratch_dir(reference_name) {\n    /*  We get the reference scratch directory as a combination of */\n    /*  the dragen scratch mount and the reference name */\n    return get_scratch_mount() + reference_name + \"/\";\n}\nfunction get_ora_intermediate_output_dir() {\n    return get_scratch_mount() + \"ora-outputs/\";\n}\nfunction generate_ora_mv_files_script(fastq_list_rows, input_directory, output_directory) {\n    /*\n    Generate the shell script with a list of echo commands to write a new fastq list csv to stdout, however\n    the fastq list csv contains the ora files as outputs instead\n    */\n    var ora_mv_files_script = \"#!/usr/bin/env bash\\n\\n\";\n    ora_mv_files_script += \"# Exit on failure\\n\";\n    ora_mv_files_script += \"set -euo pipefail\\n\\n\";\n    ora_mv_files_script += \"# Get fastq ora paths\\n\";\n    ora_mv_files_script += \"FASTQ_ORA_OUTPUT_PATHS=(\\n\";\n    /*  Iterate over all files */\n    for (var _i = 0, fastq_list_rows_3 = fastq_list_rows; _i < fastq_list_rows_3.length; _i++) {\n        var fastq_list_row = fastq_list_rows_3[_i];\n        /*  Confirm read 1 is a file type */\n        if (\"class\" in fastq_list_row.read_1 && fastq_list_row.read_1.class === \"File\") {\n            /*  Add relative path of read 1 */\n            ora_mv_files_script += \"  \\\"\".concat(fastq_list_row.read_1.path.replace(input_directory.path + \"/\", '').replace(\".gz\", \".ora\"), \"\\\" \\\\\\n\");\n        }\n        /*  Confirm read 2 is a file type */\n        if (fastq_list_row.read_2 !== null && \"class\" in fastq_list_row.read_2 && fastq_list_row.read_2.class === \"File\") {\n            /*  Add relative path of read 2 */\n            ora_mv_files_script += \"  \\\"\".concat(fastq_list_row.read_2.path.replace(input_directory.path + \"/\", '').replace(\".gz\", \".ora\"), \"\\\" \\\\\\n\");\n        }\n    }\n    /*  Complete the bash array */\n    ora_mv_files_script += \")\\n\\n\";\n    ora_mv_files_script += \"# Move all ora files to the final output directory\\n\";\n    ora_mv_files_script += \"xargs \\\\\\n\";\n    ora_mv_files_script += \"  --max-args=1 \\\\\\n\";\n    ora_mv_files_script += \"  --max-procs=16 \\\\\\n\";\n    ora_mv_files_script += \"  bash -c \\\\\\n\";\n    ora_mv_files_script += \"    '\\n\";\n    ora_mv_files_script += \"      fastq_ora_scratch_path=\\\"\".concat(get_ora_intermediate_output_dir(), \"$(basename \\\"$@\\\")\\\"\\n\");\n    ora_mv_files_script += \"      mkdir -p \\\"$(dirname \\\"\".concat(output_directory, \"/$@\\\")\\\"\\n\");\n    ora_mv_files_script += \"      rsync \\\\\\n\";\n    ora_mv_files_script += \"        --archive \\\\\\n\";\n    ora_mv_files_script += \"        --remove-source-files \\\\\\n\";\n    ora_mv_files_script += \"        --include \\\"$(basename \\\"$@\\\")\\\" \\\\\\n\";\n    ora_mv_files_script += \"        --exclude \\\"*\\\" \\\\\\n\";\n    ora_mv_files_script += \"        \\\"$(dirname \\\"${fastq_ora_scratch_path}\\\")/\\\" \\\\\\n\";\n    ora_mv_files_script += \"        \\\"$(dirname \\\"\".concat(output_directory, \"/$@\\\")/\\\"\\n\");\n    ora_mv_files_script += \"    ' \\\\\\n\";\n    ora_mv_files_script += \"  _ \\\\\\n\";\n    ora_mv_files_script += \"  <<< \\\"${FASTQ_ORA_OUTPUT_PATHS[@]}\\\"\\n\\n\";\n    ora_mv_files_script += \"# Transfer all other files\\n\";\n    ora_mv_files_script += \"mkdir -p \\\"\".concat(output_directory, \"/ora-logs/\\\"\\n\");\n    ora_mv_files_script += \"mv \\\"\".concat(get_ora_intermediate_output_dir(), \"\\\" \\\"\").concat(output_directory, \"/ora-logs/compression/\\\"\\n\");\n    return {\n        class:\"File\",\n        basename:get_ora_mv_files_script_path(),\n        contents:ora_mv_files_script\n    };\n}\nfunction generate_new_fastq_list_csv_script(fastq_list_rows, input_directory) {\n    /*\n    Generate the shell script with a list of mv commands to move the output files from the scratch space to their\n    original location in the working directory\n    */\n    var new_fastq_list_csv_script = \"#!/usr/bin/env bash\\n\\n\";\n    new_fastq_list_csv_script += \"set -euo pipefail\\n\\n\";\n    new_fastq_list_csv_script += \"# Generate a new fastq list csv script\\n\";\n    new_fastq_list_csv_script += \"# Initialise header\\n\";\n    new_fastq_list_csv_script += \"echo \\\"RGID,RGLB,RGSM,Lane,Read1File,Read2File\\\"\\n\";\n    for (var _i = 0, fastq_list_rows_4 = fastq_list_rows; _i < fastq_list_rows_4.length; _i++) {\n        var fastq_list_row = fastq_list_rows_4[_i];\n        /*  Initialise echo line */\n        var echo_line = \"echo \\\"\".concat(fastq_list_row.rgid, \",\").concat(fastq_list_row.rglb, \",\").concat(fastq_list_row.rgsm, \",\").concat(fastq_list_row.lane, \",\");\n        /*  Confirm read 1 is a file type */\n        if (\"class\" in fastq_list_row.read_1 && fastq_list_row.read_1.class === \"File\") {\n            echo_line += \"\".concat(fastq_list_row.read_1.path.replace(input_directory.path + \"/\", '').replace(\".gz\", \".ora\"), \",\");\n        }\n        else {\n            echo_line += ',';\n        }\n        /*  Confirm read 2 is a file type */\n        if (fastq_list_row.read_2 !== null && \"class\" in fastq_list_row.read_2 && fastq_list_row.read_2.class === \"File\") {\n            echo_line += \"\".concat(fastq_list_row.read_2.path.replace(input_directory.path + \"/\", '').replace(\".gz\", \".ora\"));\n        }\n        /*  Finish off echo line */\n        echo_line += \"\\\"\\n\";\n        new_fastq_list_csv_script += echo_line;\n    }\n    return {\n        class:\"File\",\n        basename:get_new_fastq_list_csv_script_path(),\n        contents:new_fastq_list_csv_script\n    };\n}\nfunction find_fastq_files_in_directory_recursively_with_regex(input_dir) {\n    var _a;\n    /*\n    Initialise the output file object\n    */\n    var read_1_file_list = [];\n    var read_2_file_list = [];\n    var output_file_objs = [];\n    var fastq_file_regex = /\\.fastq\\.gz$/;\n    var r1_fastq_file_regex = /_R1_001\\.fastq\\.gz$/;\n    var r2_fastq_file_regex = /_R2_001\\.fastq\\.gz$/;\n    /*\n    Check input_dir is a directory and has a listing\n    */\n    if (input_dir.class === undefined || input_dir.class !== \"Directory\") {\n        throw new Error(\"Could not confirm that the first argument was a directory\");\n    }\n    if (input_dir.listing === undefined || input_dir.listing === null) {\n        throw new Error(\"Could not collect listing from directory \\\"\".concat(input_dir.basename, \"\\\"\"));\n    }\n    /*\n    Collect listing as a variable\n    */\n    var input_listing = input_dir.listing;\n    /*\n    Iterate through the file listing\n    */\n    for (var _i = 0, input_listing_1 = input_listing; _i < input_listing_1.length; _i++) {\n        var listing_item = input_listing_1[_i];\n        if (listing_item.class === \"File\" && fastq_file_regex.test(listing_item.basename)) {\n            /*\n            Got the file of interest and the file basename matches the file regex\n            */\n            /*\n            Check if the file is read 1 or read 2\n            */\n            if (r1_fastq_file_regex.test(listing_item.basename)) {\n                read_1_file_list.push(listing_item);\n            }\n            if (r2_fastq_file_regex.test(listing_item.basename)) {\n                read_2_file_list.push(listing_item);\n            }\n        }\n        if (listing_item.class === \"Directory\") {\n            var subdirectory_list = listing_item;\n            try {\n                /*  Consider that the file might not be in this subdirectory and that is okay */\n                output_file_objs.push.apply(output_file_objs, find_fastq_files_in_directory_recursively_with_regex(subdirectory_list));\n            }\n            catch (error) {\n                /*  Dont need to report an error though, just continue */\n            }\n        }\n    }\n    /*  Iterate over all the read 1 files and try to find a matching read 2 file */\n    for (var _b = 0, read_1_file_list_1 = read_1_file_list; _b < read_1_file_list_1.length; _b++) {\n        var read_1_file = read_1_file_list_1[_b];\n        var read_2_file = undefined;\n        for (var _c = 0, read_2_file_list_1 = read_2_file_list; _c < read_2_file_list_1.length; _c++) {\n            var read_2_file_candidate = read_2_file_list_1[_c];\n            if (((_a = read_1_file.basename) === null || _a === void 0 ? void 0 :_a.replace(\"R1_001.fastq.gz\", \"R2_001.fastq.gz\")) === read_2_file_candidate.basename) {\n                read_2_file = read_2_file_candidate;\n                break;\n            }\n        }\n        output_file_objs.push({ read1obj:read_1_file, read2obj:read_2_file });\n    }\n    /*  Return the output file object */\n    return output_file_objs;\n}\nfunction get_rgsm_value_from_fastq_file_name(fastq_file_name) {\n    /*  Get the RGID value from the fastq file name */\n    var rgid_regex = /(.+?)(?:_S\\d+)?(?:_L00\\d)?_R[12]_001\\.fastq\\.gz$/;\n    var rgid_expression = rgid_regex.exec(fastq_file_name);\n    if (rgid_expression === null) {\n        throw new Error(\"Could not get rgid from \".concat(fastq_file_name));\n    }\n    return rgid_expression[1];\n}\nfunction get_lane_value_from_fastq_file_name(fastq_file_name) {\n    /*  Get the lane value from the fastq file name */\n    var lane_regex = /(?:.+?)(?:_S\\d+)?_L00(\\d)_R[12]_001\\.fastq\\.gz$/;\n    var lane_expression = lane_regex.exec(fastq_file_name);\n    if (lane_expression === null) {\n        return 1;\n    }\n    else {\n        console.log(lane_expression);\n        return parseInt(lane_expression[1]);\n    }\n}\nfunction generate_ora_mount_points(input_run, output_directory_path, sample_id_list) {\n    /*\n    Three main parts\n\n    1. Collect the fastq files\n    2. For each fastq file pair, generate the rgid, rgsm, rglb and lane attributes as necessary to make a fastq list row\n    3. Generate the fastq list csv file\n    */\n    /*  Collect the fastq files */\n    var fastq_files_pairs = find_fastq_files_in_directory_recursively_with_regex(input_run);\n    /*  For each fastq file pair, generate the rgid, rgsm, rglb and lane attributes as necessary */\n    var fastq_list_rows = [];\n    for (var _i = 0, fastq_files_pairs_1 = fastq_files_pairs; _i < fastq_files_pairs_1.length; _i++) {\n        var fastq_files_pair = fastq_files_pairs_1[_i];\n        var rgsm_value = get_rgsm_value_from_fastq_file_name(fastq_files_pair.read1obj.basename);\n        /*  Skip fastq list pair if sample_id_list is defined and the rgsm_value is not in the list */\n        if (sample_id_list !== undefined && sample_id_list !== null && sample_id_list !== \"\" && sample_id_list.indexOf(rgsm_value) === -1) {\n            continue;\n        }\n        /*  Remove undetermined files from the list of fastqs to process (they are often empty) */\n        if (rgsm_value === \"Undetermined\") {\n            continue;\n        }\n        /*  Check if we have the size attribute and if so check if it is greater than 0 */\n        if (fastq_files_pair.read1obj.size !== null && fastq_files_pair.read1obj.size !== undefined && fastq_files_pair.read1obj.size == 0) {\n            continue;\n        }\n        /*  Repeat the condition for read 2 although also ensure that read 2 is also actually defined */\n        if (fastq_files_pair.read2obj !== undefined && fastq_files_pair.read2obj !== null) {\n            if (fastq_files_pair.read2obj.size !== null && fastq_files_pair.read2obj.size !== undefined && fastq_files_pair.read2obj.size == 0) {\n                continue;\n            }\n        }\n        var lane_value = get_lane_value_from_fastq_file_name(fastq_files_pair.read1obj.basename);\n        var fastq_list_row = {\n            rgid:lane_value.toString() + '.' + rgsm_value,\n            rgsm:rgsm_value,\n            rglb:\"UnknownLibrary\",\n            lane:lane_value,\n            read_1:fastq_files_pair.read1obj,\n            read_2:fastq_files_pair.read2obj\n        };\n        fastq_list_rows.push(fastq_list_row);\n    }\n    /*  Initialise dirent */\n    var e = [];\n    /*  Generate the fastq list csv file */\n    e.push({\n        \"entryname\":get_fastq_list_csv_path(),\n        \"entry\":generate_fastq_list_csv(fastq_list_rows)\n    });\n    /*  Generate the script to then move the files from the scratch space to the working directory */\n    e.push({\n        \"entryname\":get_ora_mv_files_script_path(),\n        \"entry\":generate_ora_mv_files_script(fastq_list_rows, input_run, output_directory_path)\n    });\n    /*  Generate the script to generate the new output fastq list csv */\n    e.push({\n        \"entryname\":get_new_fastq_list_csv_script_path(),\n        \"entry\":generate_new_fastq_list_csv_script(fastq_list_rows, input_run)\n    });\n    /*  Return the dirent */\n    /*  @ts-ignore Type '{ entryname:string; entry:FileProperties; }[]' is not assignable to type 'DirentProperties[]' */\n    return e;\n}\n",
            "/*  Author:Alexis Lucattini */\n/*  For assistance on generation of typescript expressions */\n/*  In CWL, please visit our wiki page at https://github.com/umccr/cwl-ica/wiki/TypeScript */\n/*  Imports */\n/*  Functions */\nfunction is_not_null(input_obj) {\n    /*\n    Determine if input object is defined and is not null\n    */\n    return !(input_obj === null || input_obj === undefined);\n}\nfunction get_attribute_from_optional_input(input_object, attribute) {\n    /*\n    Get attribute from optional input -\n    If input is not defined, then return null\n    */\n    if (input_object === null || input_object === undefined) {\n        return null;\n    }\n    else {\n        return get_optional_attribute_from_object(input_object, attribute);\n    }\n}\nfunction get_optional_attribute_from_object(input_object, attribute) {\n    /*\n    Get attribute from object, if attribute is not defined return null\n    Assume the input object is an object of key value pairs where we know the key is of type string\n    stackoverflow.com/questions/56833469/typescript-error-ts7053-element-implicitly-has-an-any-type\n    */\n    if (input_object.hasOwnProperty(attribute)) {\n        return input_object[attribute];\n    }\n    else {\n        return null;\n    }\n}\nfunction get_bool_value_as_str(input_bool) {\n    if (is_not_null(input_bool) && input_bool) {\n        return \"true\";\n    }\n    else {\n        return \"false\";\n    }\n}\nfunction boolean_to_int(input_bool) {\n    if (is_not_null(input_bool) && String(input_bool).toLowerCase() === \"true\") {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\nfunction get_optional_attribute_from_multi_type_input_object(object, attribute) {\n    /*\n    Get attribute from optional input\n    */\n    if (object === null || object === undefined) {\n        return null;\n    }\n    else if (typeof object === \"object\") {\n        /*  Get attribute from optional input */\n        return get_attribute_from_optional_input(object, attribute);\n    }\n    else {\n        /*  Object is likely actually a str */\n        return object;\n    }\n}\nfunction get_source_a_or_b(input_a, input_b) {\n    /*\n    Get the first input parameter if it is not null\n    Otherwise return the second parameter\n    Otherwise return null\n    */\n    if (is_not_null(input_a)) {\n        return input_a;\n    }\n    else if (is_not_null(input_b)) {\n        return input_b;\n    }\n    else {\n        return null;\n    }\n}\nfunction get_first_non_null_input(inputs) {\n    /*\n    Get first element of the array that is not null\n    */\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n        var input_element = inputs_1[_i];\n        if (is_not_null(input_element)) {\n            return input_element;\n        }\n    }\n    return null;\n}\nfunction get_attribute_list_from_object_list(obj_list, attribute) {\n    /*\n    Get attribute from list of objects\n    If an object is null, it is not included in the return list\n    */\n    return obj_list.filter(function (x) { return x !== null; }).map(function (x) { return get_optional_attribute_from_object(x, attribute); });\n}\nfunction get_str_list_as_bash_array(input_list, item_wrap) {\n    /*\n    Convert a list of strings to a bash array, if the list is not defined return null\n    */\n    if (input_list === null) {\n        return null;\n    }\n    if (item_wrap === null) {\n        return \"( \".concat(input_list.map(function (x) { return \"'\".concat(item_wrap).concat(x).concat(item_wrap, \"'\"); }).join(' '), \" )\");\n    }\n    return \"( \".concat(input_list.map(function (x) { return \"'\".concat(x, \"'\"); }).join(' '), \" )\");\n}\nfunction get_object_attribute_list_as_bash_array(obj_list, attribute) {\n    /*\n    Get attribute from list of objects and convert to a bash array\n    Do not include null values in the array\n    */\n    return get_str_list_as_bash_array(get_attribute_list_from_object_list(obj_list, attribute).filter(function (x) { return x !== null; }));\n}\n"
          ],
          "class": "InlineJavascriptRequirement"
        },
        {
          "tmpdirMin": "${\n  /* 1 Tb */\n  return Math.pow(2, 20);\n}\n",
          "class": "ResourceRequirement"
        },
        {
          "types": [
            {
              "type": "record",
              "name": "#fastq-list-row__1.0.0.yaml/fastq-list-row",
              "fields": [
                {
                  "label": "lane",
                  "doc": "The lane that the sample was run on\n",
                  "type": "int",
                  "name": "#fastq-list-row__1.0.0.yaml/fastq-list-row/lane"
                },
                {
                  "label": "read 1",
                  "doc": "The path to R1 of a sample\n",
                  "type": [
                    "File",
                    "string"
                  ],
                  "streamable": true,
                  "name": "#fastq-list-row__1.0.0.yaml/fastq-list-row/read_1"
                },
                {
                  "label": "read 2",
                  "doc": "The path to R2 of a sample\n",
                  "type": [
                    "null",
                    "File",
                    "string"
                  ],
                  "streamable": true,
                  "name": "#fastq-list-row__1.0.0.yaml/fastq-list-row/read_2"
                },
                {
                  "label": "rgid",
                  "doc": "The read-group id of the sample.\nOften an index\n",
                  "type": "string",
                  "name": "#fastq-list-row__1.0.0.yaml/fastq-list-row/rgid"
                },
                {
                  "label": "rglb",
                  "doc": "The read-group library of the sample.\n",
                  "type": "string",
                  "name": "#fastq-list-row__1.0.0.yaml/fastq-list-row/rglb"
                },
                {
                  "label": "rgsm",
                  "doc": "The read-group sample name\n",
                  "type": "string",
                  "name": "#fastq-list-row__1.0.0.yaml/fastq-list-row/rgsm"
                }
              ]
            }
          ],
          "class": "SchemaDefRequirement"
        }
      ],
      "baseCommand": [
        "bash"
      ],
      "arguments": [
        {
          "valueFrom": "$(get_script_path())",
          "position": -1
        },
        {
          "prefix": "--enable-variant-caller=",
          "separate": false,
          "valueFrom": "true"
        },
        {
          "prefix": "--intermediate-results-dir=",
          "separate": false,
          "valueFrom": "$(get_intermediate_results_dir())"
        }
      ],
      "inputs": [
        {
          "label": "bam input",
          "doc": "Input a normal BAM file for the variant calling stage\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--bam-input=",
            "separate": false
          },
          "secondaryFiles": [
            {
              "pattern": ".bai",
              "required": true
            }
          ],
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/bam_input"
        },
        {
          "label": "cnv enable self normalization",
          "doc": "Enable CNV self normalization.\nSelf Normalization requires that the DRAGEN hash table be generated with the enable-cnv=true option.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--cnv-enable-self-normalization=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/cnv_enable_self_normalization"
        },
        {
          "label": "cram input",
          "doc": "Input a normal CRAM file for the variant calling stage\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--cram-input=",
            "separate": false
          },
          "secondaryFiles": [
            {
              "pattern": ".crai",
              "required": true
            }
          ],
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/cram_input"
        },
        {
          "label": "cram reference",
          "doc": "Path to the reference fasta file for the CRAM input.\nRequired only if the input is a cram file AND not the reference in the tarball\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--cram-reference=",
            "separate": false
          },
          "secondaryFiles": [
            {
              "pattern": ".fai",
              "required": true
            }
          ],
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/cram_reference"
        },
        {
          "label": "dbsnp annotation",
          "doc": "In Germline, Tumor-Normal somatic, or Tumor-Only somatic modes,\nDRAGEN can look up variant calls in a dbSNP database and add annotations for any matches that it finds there.\nTo enable the dbSNP database search, set the --dbsnp option to the full path to the dbSNP database\nVCF or .vcf.gz file, which must be sorted in reference order.\n",
          "type": [
            "null",
            "File"
          ],
          "secondaryFiles": [
            {
              "pattern": ".tbi",
              "required": true
            }
          ],
          "inputBinding": {
            "prefix": "--dbsnp=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/dbsnp_annotation"
        },
        {
          "label": "deduplicate minimum quality",
          "doc": "Specifies the Phred quality score below which a base should be excluded from the quality score\ncalculation used for choosing among duplicate reads.\n",
          "type": [
            "null",
            "int"
          ],
          "inputBinding": {
            "prefix": "--dedup-min-qual=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/dedup_min_qual"
        },
        {
          "label": "enable cnv calling",
          "doc": "Enable CNV processing in the DRAGEN Host Software.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--enable-cnv=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/enable_cnv"
        },
        {
          "label": "enable duplicate marking",
          "doc": "Mark identical alignments as duplicates\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--enable-duplicate-marking=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/enable_duplicate_marking"
        },
        {
          "label": "enable hla",
          "doc": "Enable HLA typing by setting --enable-hla flag to true\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--enable-hla=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/enable_hla"
        },
        {
          "label": "enable map align",
          "doc": "Enabled by default since --enable-variant-caller option is set to true.\nSet this value to false if using bam_input\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--enable-map-align=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/enable_map_align"
        },
        {
          "label": "enable map align output",
          "doc": "Do you wish to have the output bam files present\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--enable-map-align-output=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/enable_map_align_output"
        },
        {
          "label": "enable pgx",
          "doc": "Enable star allele caller. This also turns on other PGx callers such as CYP2D6, CYP2B6\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--enable-pgx=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/enable_pgx"
        },
        {
          "label": "enable sort",
          "doc": "True by default, only set this to false if using --bam-input parameter\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--enable-sort=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/enable_sort"
        },
        {
          "label": "enable sv",
          "doc": "Enable/disable structural variant\ncaller. Default is false.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--enable-sv=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/enable_sv"
        },
        {
          "label": "enable targeted",
          "doc": "Enable targeted variant calling for repetitive regions\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--enable-targeted=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/enable_targeted"
        },
        {
          "label": "fastq list",
          "doc": "CSV file that contains a list of FASTQ files\nto process.\nRead1File and Read2File may be presigned urls or use this in conjunction with\nthe fastq_list_mount_paths inputs.\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "loadContents": true,
            "prefix": "--fastq-list=",
            "separate": false,
            "valueFrom": "$(get_fastq_list_csv_path())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/fastq_list"
        },
        {
          "label": "fastq list rows",
          "doc": "Alternative to providing a file, one can instead provide a list of 'fastq-list-row' objects\n",
          "type": [
            "null",
            {
              "type": "array",
              "items": "#fastq-list-row__1.0.0.yaml/fastq-list-row"
            }
          ],
          "inputBinding": {
            "prefix": "--fastq-list=",
            "separate": false,
            "valueFrom": "$(get_fastq_list_csv_path())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/fastq_list_rows"
        },
        {
          "label": "hla allele frequency file",
          "doc": "Use the population-level HLA allele frequency file to break ties if one or more HLA allele produces the same or similar results.\nThe input HLA allele frequency file must be in CSV format and contain the HLA alleles and the occurrence frequency in population.\nIf --hla-allele-frequency-file is not specified, DRAGEN automatically uses hla_classI_allele_frequency.csv from /opt/edico/config/.\nPopulation-level allele frequencies can be obtained from the Allele Frequency Net database.\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--hla-allele-frequency-file=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/hla_allele_frequency_file"
        },
        {
          "label": "hla bed file",
          "doc": "Use the HLA region BED input file to specify the region to extract HLA reads from.\nDRAGEN HLA Caller parses the input file for regions within the BED file, and then\nextracts reads accordingly to align with the HLA allele reference.\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--hla-bed-file=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/hla_bed_file"
        },
        {
          "label": "hla enable class 2",
          "doc": "Enable class II HLA typing by setting --hla-enable-class-2 flag to true\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--hla-enable-class-2=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/hla_enable_class_2"
        },
        {
          "label": "hla min reads",
          "doc": "Set the minimum number of reads to align to HLA alleles to ensure sufficient coverage and perform HLA typing.\nThe default value is 1000 and suggested for WES samples. If using samples with less coverage, you can use a\nlower threshold value.\n",
          "type": [
            "null",
            "int"
          ],
          "inputBinding": {
            "prefix": "--hla-min-reads=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/hla_min_reads"
        },
        {
          "label": "hla reference file",
          "doc": "Use the HLA allele reference file to specify the reference alleles to align against.\nThe input HLA reference file must be in FASTA format and contain the protein sequence separated into exons.\nIf --hla-reference-file is not specified, DRAGEN uses hla_classI_ref_freq.fasta from /opt/edico/config/.\nThe reference HLA sequences are obtained from the IMGT/HLA database.\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--hla-reference-file=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/hla_reference_file"
        },
        {
          "label": "hla tiebreaker threshold",
          "doc": "If more than one allele has a similar number of reads aligned and there is not a clear indicator for the best allele,\nthe alleles are considered as ties. The HLA Caller places the tied alleles into a candidate set for tie breaking based\non the population allele frequency. If an allele has more than the specified fraction of reads aligned (normalized to\nthe top hit), then the allele is included into the candidate set for tie breaking. The default value is 0.97.\n",
          "type": [
            "null",
            "float"
          ],
          "inputBinding": {
            "prefix": "--hla-tiebreaker-threshold=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/hla_tiebreaker_threshold"
        },
        {
          "label": "hla zygosity threshold",
          "doc": "If the minor allele at a given locus has fewer reads mapped than a fraction of the read count of the major allele,\nthen the HLA Caller infers homozygosity for the given HLA-I gene. You can use this option to specify the fraction value.\nThe default value is 0.15.\n",
          "type": [
            "null",
            "float"
          ],
          "inputBinding": {
            "prefix": "--hla zygosity threshold=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/hla_zygosity_threshold"
        },
        {
          "label": "license instance id location",
          "doc": "You may wish to place your own in.\nOptional value, default set to /opt/instance-identity\nwhich is a path inside the dragen container\n",
          "type": [
            "null",
            "File",
            "string"
          ],
          "default": "/opt/instance-identity",
          "inputBinding": {
            "prefix": "--lic-instance-id-location=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/lic_instance_id_location"
        },
        {
          "label": "output directory",
          "doc": "The directory where all output files are placed\n",
          "type": "string",
          "inputBinding": {
            "prefix": "--output-directory=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/output_directory"
        },
        {
          "label": "output file prefix",
          "doc": "The prefix given to all output files\n",
          "type": "string",
          "inputBinding": {
            "prefix": "--output-file-prefix=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/output_file_prefix"
        },
        {
          "label": "output format",
          "doc": "For mapping and aligning, the output is sorted and compressed into BAM format by default before saving to disk.\nYou can control the output format from the map/align stage with the --output-format <SAM|BAM|CRAM> option.\n",
          "type": [
            "null",
            {
              "type": "enum",
              "symbols": [
                "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/output_format/SAM",
                "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/output_format/BAM",
                "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/output_format/CRAM"
              ]
            }
          ],
          "inputBinding": {
            "prefix": "--output-format=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/output_format"
        },
        {
          "label": "qc coverage ignore overlaps",
          "doc": "Set to true to resolve all of the alignments for each fragment and avoid double-counting any\noverlapping bases. This might result in marginally longer run times.\nThis option also requires setting --enable-map-align=true.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--qc-coverage-ignore-overlaps=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/qc_coverage_ignore_overlaps"
        },
        {
          "label": "qc coverage region 1",
          "doc": "Generates coverage region report using bed file 1.\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--qc-coverage-region-1=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/qc_coverage_region_1"
        },
        {
          "label": "qc coverage region 2",
          "doc": "Generates coverage region report using bed file 2.\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--qc-coverage-region-2=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/qc_coverage_region_2"
        },
        {
          "label": "qc coverage region 3",
          "doc": "Generates coverage region report using bed file 3.\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--qc-coverage-region-3=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/qc_coverage_region_3"
        },
        {
          "label": "reference tar",
          "doc": "Path to ref data tarball\n",
          "type": "File",
          "inputBinding": {
            "prefix": "--ref-dir=",
            "separate": false,
            "valueFrom": "$(get_ref_path(self))"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/reference_tar"
        },
        {
          "label": "repeat genotype enable",
          "doc": "Enable DRAGEN repeat expansion detection\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--repeat-genotype-enable=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/repeat_genotype_enable"
        },
        {
          "label": "repeat genotype specs",
          "doc": "Specifies the full path to the JSON file that contains the repeat variant catalog (specification) describing the loci to call.\n--repeat-genotype-specs is required for ExpansionHunter.\nIf the option is not provided,\nDRAGEN attempts to autodetect the applicable catalog file from /opt/edico/repeat-specs/ based on the reference provided.\n",
          "type": [
            "null",
            "File",
            "string"
          ],
          "inputBinding": {
            "prefix": "--repeat-genotype-specs=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/repeat_genotype_specs"
        },
        {
          "label": "repeat genotype use catalog",
          "doc": "The repeat-specification (also called variant catalog) JSON file defines the repeat regions for ExpansionHunter to analyze.\nDefault repeat-specification for some pathogenic and polymorphic repeats are in the /opt/edico/repeat-specs/ directory,\nbased on the reference genome used with DRAGEN. Users can choose between any of the three default repeat-specification files\npackaged with DRAGEN using <default|default_plus_smn|expanded>\n",
          "type": [
            "null",
            {
              "type": "enum",
              "symbols": [
                "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/repeat_genotype_use_catalog/default",
                "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/repeat_genotype_use_catalog/default_plus_smn",
                "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/repeat_genotype_use_catalog/expanded"
              ]
            }
          ],
          "inputBinding": {
            "prefix": "--repeat-genotype-use-catalog=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/repeat_genotype_use_catalog"
        },
        {
          "label": "sample sex",
          "doc": "Specifies the sex of a sample\n",
          "type": [
            "null",
            {
              "type": "enum",
              "symbols": [
                "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sample_sex/none",
                "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sample_sex/auto",
                "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sample_sex/male",
                "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sample_sex/female"
              ]
            }
          ],
          "inputBinding": {
            "prefix": "--sample-sex=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sample_sex"
        },
        {
          "label": "sv call regions bed",
          "doc": "Specifies a BED file containing the set of regions to call.\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--sv-call-regions-bed=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sv_call_regions_bed"
        },
        {
          "label": "sv discovery",
          "doc": "Enable SV discovery. This flag can be set to false only when --sv-forcegt-vcf is used.\nWhen set to false, SV discovery is disabled and only the forced genotyping input variants\nare processed. The default is true.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--sv-discovery=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sv_discovery"
        },
        {
          "label": "sv enable liquid tumor mode",
          "doc": "Enable liquid tumor mode.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--sv-enable-liquid-tumor-mode=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sv_enable_liquid_tumor_mode"
        },
        {
          "label": "sv exome",
          "doc": "Set to true to configure the variant caller for targeted sequencing inputs,\nwhich includes disabling high depth filters.\nIn integrated mode, the default is to autodetect targeted sequencing input,\nand in standalone mode the default is false.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--sv-exome=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sv_exome"
        },
        {
          "label": "sv forcegt vcf",
          "doc": "Specify a VCF of structural variants for forced genotyping. The variants are scored and emitted\nin the output VCF even if not found in the sample data.\nThe variants are merged with any additional variants discovered directly from the sample data.\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--sv-forcegt-vcf=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sv_forcegt_vcf"
        },
        {
          "label": "sv output contigs",
          "doc": "Set to true to have assembled contig sequences output in a VCF file. The default is false.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--sv-output-contigs=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sv_output_contigs"
        },
        {
          "label": "sv region",
          "doc": "Limit the analysis to a specified region of the genome for debugging purposes.\nThis option can be specified multiple times to build a list of regions.\nThe value must be in the format \"chr:startPos-endPos\"..\n",
          "type": [
            "null",
            "string"
          ],
          "inputBinding": {
            "prefix": "--sv-region=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sv_region"
        },
        {
          "label": "sv use overlap pair evidence",
          "doc": "Allow overlapping read pairs to be considered as evidence.\nBy default, DRAGEN uses autodetect on the fraction of overlapping read pairs if <20%.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--sv-use-overlap-pair-evidence=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sv_se_overlap_pair_evidence"
        },
        {
          "label": "sv tin contam tolerance",
          "doc": "Set the Tumor-in-Normal (TiN) contamination tolerance level.\nYou can enter any value between 0-1. The default maximum TiN contamination tolerance is 0.15.\n",
          "type": [
            "null",
            "float"
          ],
          "inputBinding": {
            "prefix": "--sv-tin-contam-tolerance=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/sv_tin_contam_tolerance"
        },
        {
          "label": "vc decoy contigs",
          "doc": "The --vc-decoy-contigs option specifies a comma-separated list of contigs to skip during variant calling.\nThis option can be set in the configuration file.\n",
          "type": [
            "null",
            "string"
          ],
          "inputBinding": {
            "prefix": "--vc-decoy-contigs=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_decoy_contigs"
        },
        {
          "label": "vc emit ref confidence",
          "doc": "A genomic VCF (gVCF) file contains information on variants and positions determined to be homozygous to the reference genome.\nFor homozygous regions, the gVCF file includes statistics that indicate how well reads support the absence of variants or\nalternative alleles. To enable gVCF output, set to GVCF. By default, contiguous runs of homozygous reference calls with similar\nscores are collapsed into blocks (hom-ref blocks). Hom-ref blocks save disk space and processing time of downstream analysis tools.\nDRAGEN recommends using the default mode. To produce unbanded output, set --vc-emit-ref-confidence to BP_RESOLUTION.\n",
          "type": [
            "null",
            "string"
          ],
          "inputBinding": {
            "prefix": "--vc-emit-ref-confidence=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_emit_ref_confidence"
        },
        {
          "label": "vc enable baf",
          "doc": "Enable or disable B-allele frequency output. Enabled by default.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--vc-enable-baf=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_enable_baf"
        },
        {
          "label": "vc enable decoy contigs",
          "doc": "If --vc-enable-decoy-contigs is set to true, variant calls on the decoy contigs are enabled.\nThe default value is false.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--vc-enable-decoy-contigs=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_enable_decoy_contigs"
        },
        {
          "label": "vc enable gatk acceleration",
          "doc": "If is set to true, the variant caller runs in GATK mode\n(concordant with GATK 3.7 in germline mode and GATK 4.0 in somatic mode).\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--vc-enable-gatk-acceleration=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_enable_gatk_acceleration"
        },
        {
          "label": "vc enable phasing",
          "doc": "The -vc-enable-phasing option enables variants to be phased when possible. The default value is true.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--vc-enable-phasing=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_enable_phasing"
        },
        {
          "label": "vc enable roh",
          "doc": "Enable or disable the ROH caller by setting this option to true or false. Enabled by default for human autosomes only.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--vc-enable-roh=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_enable_roh"
        },
        {
          "label": "vc enable sex chr diploid",
          "doc": "For male samples in germline calling mode, DRAGEN calls potential mosaic variants in non-PAR regions of sex chromosomes.\nA variant is called as mosaic when the allele frequency (FORMAT/AF) is below 85% or if multiple alt alleles are called,\nsuggesting incompatibility with the haploid assumption. The GT field for bi-allelic mosaic variants is \"0/1\",\ndenoting a mixture of reference and alt alleles, as opposed to the regular GT of \"1\" for haploid variants.\nThe GT field for multi-allelic mosaic variants is \"1/2\" in VCF.\nYou can disable the calling of mosaic variants by setting --vc-enable-sex-chr-diploid to false.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--vc-enable-sex-chr-diploid=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_enable_sex_chr_diploid"
        },
        {
          "label": "vc enable vcf output",
          "doc": "The -vc-enable-vcf-output option enables VCF file output during a gVCF run. The default value is false.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--vc-enable-vcf-output=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_enable_vcf_output"
        },
        {
          "label": "vc forcegt vcf",
          "doc": "AGENsupports force genotyping (ForceGT) for Germline SNV variant calling.\nTo use ForceGT, use the --vc-forcegt-vcf option with a list of small variants to force genotype.\nThe input list of small variants can be a .vcf or .vcf.gz file.\n\nThe current limitations of ForceGT are as follows:\n*\tForceGT is supported for Germline SNV variant calling in the V3 mode.\nThe V1, V2, and V2+ modes are not supported.\n*\tForceGT is not supported for Somatic SNV variant calling.\n*\tForceGT variants do not propagate through Joint Genotyping.\n",
          "type": [
            "null",
            "File"
          ],
          "secondaryFiles": [
            {
              "pattern": ".tbi",
              "required": true
            }
          ],
          "inputBinding": {
            "prefix": "--vc-forcegt-vcf=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_forcegt_vcf"
        },
        {
          "label": "vc haploid call af threshold",
          "doc": "Option --vc-haploid-call-af-threshold=<af_threshold> to control threshold.\n* Diploid model is applied to haploid (chrX/Y, non-PAR) regions in male samples.\n* Variants with only one alt allele and with AF>=85% are rewritten to haploid calls.\n* The potential mosaic calls with AF<85% will have GT of \"0/1\" and an INFO tag of\n  \"MOSAIC\" will be added.\n",
          "type": [
            "null",
            "float"
          ],
          "inputBinding": {
            "prefix": "--vc-haploid-call-af-threshold=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_haploid_call_af_threshold"
        },
        {
          "label": "vc hard filter",
          "doc": "DRAGEN provides post-VCF variant filtering based on annotations present in the VCF records.\nHowever, due to the nature of DRAGEN's algorithms, which incorporate the hypothesis of correlated errors\nfrom within the core of variant caller, the pipeline has improved capabilities in distinguishing\nthe true variants from noise, and therefore the dependency on post-VCF filtering is substantially reduced.\nFor this reason, the default post-VCF filtering in DRAGEN is very simple\n",
          "type": [
            "null",
            "string"
          ],
          "inputBinding": {
            "prefix": "--vc-hard-filter=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_hard_filter"
        },
        {
          "label": "vc max reads per active region",
          "doc": "specifies the maximum number of reads covering a given active region.\nDefault is 10000 for the germline workflow\n",
          "type": [
            "null",
            "int"
          ],
          "inputBinding": {
            "prefix": "--vc-max-reads-per-active-region=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_max_reads_per_active_region"
        },
        {
          "label": "vc max reads per raw region",
          "doc": "specifies the maximum number of reads covering a given raw region.\nDefault is 30000 for the germline workflow\n",
          "type": [
            "null",
            "int"
          ],
          "inputBinding": {
            "prefix": "--vc-max-read-per-raw-region=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_max_reads_per_raw_region"
        },
        {
          "label": "vc ml enable recalibration",
          "doc": "DRAGEN employs machine learning-based variant recalibration (DRAGEN-ML) for germline SNV VC.\nVariant calling accuracy is improved using powerful and efficient machine learning techniques that augment the variant caller,\nby exploiting more of the available read and context information that does not easily integrate into the Bayesian processing\nused by the haplotype variant caller.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--vc-ml-enable-recalibration=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_ml_enable_recalibration"
        },
        {
          "label": "vc remove all soft clips",
          "doc": "If is set to true, the variant caller does not use soft clips of reads to determine variants.\n",
          "type": [
            "null",
            "boolean"
          ],
          "inputBinding": {
            "prefix": "--vc-remove-all-soft-clips=",
            "separate": false,
            "valueFrom": "$(self.toString())"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_remove_all_soft_clips"
        },
        {
          "label": "vc roh blacklist bed",
          "doc": "If provided, the ROH caller ignores variants that are contained in any region in the blacklist BED file.\nDRAGEN distributes blacklist files for all popular human genomes and automatically selects a blacklist to\nmatch the genome in use, unless this option is used explicitly select a file.\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--vc-roh-blacklist-bed=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_roh_blacklist_bed"
        },
        {
          "label": "vc target bed",
          "doc": "This is an optional command line input that restricts processing of the small variant caller,\ntarget bed related coverage, and callability metrics to regions specified in a BED file.\n",
          "type": [
            "null",
            "File"
          ],
          "inputBinding": {
            "prefix": "--vc-target-bed=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_target_bed"
        },
        {
          "label": "vc target bed padding",
          "doc": "This is an optional command line input that can be used to pad all of the target\nBED regions with the specified value.\nFor example, if a BED region is 1:1000-2000 and a padding value of 100 is used,\nit is equivalent to using a BED region of 1:900-2100 and a padding value of 0.\n\nAny padding added to --vc-target-bed-padding is used by the small variant caller\nand by the target bed coverage/callability reports. The default padding is 0.\n",
          "type": [
            "null",
            "int"
          ],
          "inputBinding": {
            "prefix": "--vc-target-bed-padding=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_target_bed_padding"
        },
        {
          "label": "vc target coverage",
          "doc": "The --vc-target-coverage option specifies the target coverage for down-sampling.\nThe default value is 500 for germline mode and 50 for somatic mode.\n",
          "type": [
            "null",
            "int"
          ],
          "inputBinding": {
            "prefix": "--vc-target-coverage=",
            "separate": false
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/vc_target_coverage"
        }
      ],
      "successCodes": [
        0
      ],
      "https://schema.org/author": {
        "class": "https://schema.org/Person",
        "https://schema.org/name": "Alexis Lucattini",
        "https://schema.org/email": "Alexis.Lucattini@umccr.org",
        "https://schema.org/identifier": "https://orcid.org/0000-0001-9754-647X"
      },
      "outputs": [
        {
          "label": "dragen bam out",
          "doc": "The output bam file, exists only if --enable-map-align-output is set to true\n",
          "type": [
            "null",
            "File"
          ],
          "outputBinding": {
            "glob": "$(inputs.output_directory)/$(inputs.output_file_prefix).bam"
          },
          "secondaryFiles": [
            {
              "pattern": ".bai",
              "required": null
            }
          ],
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/dragen_bam_out"
        },
        {
          "label": "dragen germline output directory",
          "doc": "The output directory containing all germline output files\n",
          "type": "Directory",
          "outputBinding": {
            "glob": "$(inputs.output_directory)"
          },
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/dragen_germline_output_directory"
        },
        {
          "label": "dragen vcf out",
          "doc": "The output germline vcf file\n",
          "type": [
            "null",
            "File"
          ],
          "outputBinding": {
            "glob": "$(inputs.output_directory)/$(inputs.output_file_prefix).vcf.gz"
          },
          "secondaryFiles": [
            {
              "pattern": ".tbi",
              "required": null
            }
          ],
          "id": "#dragen-germline__4.3.6.cwl/dragen-germline--4.2.4/dragen_vcf_out"
        }
      ]
    },
    {
      "class": "CommandLineTool",
      "id": "#multiqc__1.25.1.cwl",
      "label": "multiqc v(1.25.0)",
      "doc": "Documentation for multiqc v1.25.0\nUse patch that includes https://github.com/ewels/MultiQC/pull/1969\n",
      "hints": [
        {
          "dockerPull": "ghcr.io/multiqc/multiqc:v1.25.1",
          "class": "DockerRequirement"
        },
        {
          "coresMin": 2,
          "ramMin": 4000,
          "class": "ResourceRequirement",
          "https://platform.illumina.com/rdf/ica/resources:tier": "standard",
          "https://platform.illumina.com/rdf/ica/resources:type": "standard",
          "https://platform.illumina.com/rdf/ica/resources:size": "small"
        }
      ],
      "requirements": [
        {
          "class": "InlineJavascriptRequirement"
        }
      ],
      "baseCommand": [
        "multiqc"
      ],
      "inputs": [
        {
          "label": "cl config",
          "doc": "Override config from the cli\n",
          "type": [
            "null",
            "string"
          ],
          "inputBinding": {
            "prefix": "--cl-config"
          },
          "id": "#multiqc__1.25.1.cwl/multiqc--1.25.0/cl_config"
        },
        {
          "label": "comment",
          "doc": "Custom comment, will be printed at the top of the report.\n",
          "type": [
            "null",
            "string"
          ],
          "inputBinding": {
            "prefix": "--comment"
          },
          "id": "#multiqc__1.25.1.cwl/multiqc--1.25.0/comment"
        },
        {
          "label": "config",
          "doc": "Configuration file for bclconvert\n",
          "type": [
            "null",
            "File"
          ],
          "streamable": true,
          "inputBinding": {
            "prefix": "--config"
          },
          "id": "#multiqc__1.25.1.cwl/multiqc--1.25.0/config"
        },
        {
          "label": "input directories",
          "doc": "The list of directories to place in the analysis\n",
          "type": {
            "type": "array",
            "items": "Directory"
          },
          "inputBinding": {
            "position": 100
          },
          "id": "#multiqc__1.25.1.cwl/multiqc--1.25.0/input_directories"
        },
        {
          "label": "output directory",
          "doc": "The output directory\n",
          "type": "string",
          "inputBinding": {
            "prefix": "--outdir",
            "valueFrom": "$(runtime.outdir)/$(self)"
          },
          "id": "#multiqc__1.25.1.cwl/multiqc--1.25.0/output_directory_name"
        },
        {
          "label": "output filename",
          "doc": "Report filename in html format.\nDefaults to 'multiqc-report.html\"\n",
          "type": "string",
          "inputBinding": {
            "prefix": "--filename"
          },
          "id": "#multiqc__1.25.1.cwl/multiqc--1.25.0/output_filename"
        },
        {
          "label": "title",
          "doc": "Report title.\nPrinted as page header, used for filename if not otherwise specified.\n",
          "type": "string",
          "inputBinding": {
            "prefix": "--title"
          },
          "id": "#multiqc__1.25.1.cwl/multiqc--1.25.0/title"
        }
      ],
      "outputs": [
        {
          "label": "output directory",
          "doc": "Directory that contains all multiqc analysis data\n",
          "type": "Directory",
          "outputBinding": {
            "glob": "$(inputs.output_directory_name)"
          },
          "id": "#multiqc__1.25.1.cwl/multiqc--1.25.0/output_directory"
        },
        {
          "label": "output file",
          "doc": "Output html file\n",
          "type": "File",
          "outputBinding": {
            "glob": "$(inputs.output_directory_name)/$(inputs.output_filename)"
          },
          "id": "#multiqc__1.25.1.cwl/multiqc--1.25.0/output_file"
        }
      ],
      "successCodes": [
        0
      ],
      "https://schema.org/author": {
        "class": "https://schema.org/Person",
        "https://schema.org/name": "Alexis Lucattini",
        "https://schema.org/email": "Alexis.Lucattini@umccr.org",
        "https://schema.org/identifier": "https://orcid.org/0000-0001-9754-647X"
      }
    },
    {
      "class": "Workflow",
      "id": "#main",
      "label": "dragen-germline-pipeline v(4.3.6)",
      "doc": "Documentation for dragen-germline-pipeline v4.3.6\n",
      "requirements": [
        {
          "class": "InlineJavascriptRequirement"
        },
        {
          "class": "MultipleInputFeatureRequirement"
        },
        {
          "class": "ScatterFeatureRequirement"
        },
        {
          "types": [
            {
              "$import": "#fastq-list-row__1.0.0.yaml/fastq-list-row"
            }
          ],
          "class": "SchemaDefRequirement"
        },
        {
          "class": "StepInputExpressionRequirement"
        }
      ],
      "inputs": [
        {
          "label": "bam input",
          "doc": "Input a normal BAM file for the variant calling stage\n",
          "type": [
            "null",
            "File"
          ],
          "secondaryFiles": [
            {
              "pattern": ".bai",
              "required": true
            }
          ],
          "id": "#main/bam_input"
        },
        {
          "label": "cnv enable self normalization",
          "doc": "Enable CNV self normalization.\nSelf Normalization requires that the DRAGEN hash table be generated with the enable-cnv=true option.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/cnv_enable_self_normalization"
        },
        {
          "label": "cram input",
          "doc": "Input a normal CRAM file for the variant calling stage\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/cram_input"
        },
        {
          "label": "cram reference",
          "doc": "Path to the reference fasta file for the CRAM input.\nRequired only if the input is a cram file AND not the reference in the tarball\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/cram_reference"
        },
        {
          "label": "dbsnp annotation",
          "doc": "In Germline, Tumor-Normal somatic, or Tumor-Only somatic modes,\nDRAGEN can look up variant calls in a dbSNP database and add annotations for any matches that it finds there.\nTo enable the dbSNP database search, set the --dbsnp option to the full path to the dbSNP database\nVCF or .vcf.gz file, which must be sorted in reference order.\n",
          "type": [
            "null",
            "File"
          ],
          "secondaryFiles": [
            {
              "pattern": ".tbi",
              "required": true
            }
          ],
          "id": "#main/dbsnp_annotation"
        },
        {
          "label": "deduplicate minimum quality",
          "doc": "Specifies the Phred quality score below which a base should be excluded from the quality score\ncalculation used for choosing among duplicate reads.\n",
          "type": [
            "null",
            "int"
          ],
          "id": "#main/dedup_min_qual"
        },
        {
          "label": "enable cnv calling",
          "doc": "Enable CNV processing in the DRAGEN Host Software.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/enable_cnv"
        },
        {
          "label": "enable duplicate marking",
          "doc": "Mark identical alignments as duplicates\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/enable_duplicate_marking"
        },
        {
          "label": "enable hla",
          "doc": "Enable HLA typing by setting --enable-hla flag to true\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/enable_hla"
        },
        {
          "label": "enable map align",
          "doc": "Enabled by default since --enable-variant-caller option is set to true.\nSet this value to false if using bam_input\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/enable_map_align"
        },
        {
          "label": "enable map align output",
          "doc": "Do you wish to have the output bam files present\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/enable_map_align_output"
        },
        {
          "label": "enable pgx",
          "doc": "Enable star allele caller. This also turns on other PGx callers such as CYP2D6, CYP2B6\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/enable_pgx"
        },
        {
          "label": "enable sv",
          "doc": "Enable/disable structural variant\ncaller. Default is false.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/enable_sv"
        },
        {
          "label": "enable targeted",
          "doc": "Enable targeted variant calling for repetitive regions\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/enable_targeted"
        },
        {
          "label": "fastq list",
          "doc": "CSV file that contains a list of FASTQ files\nto process.\nRead1File and Read2File may be presigned urls or use this in conjunction with\nthe fastq_list_mount_paths inputs.\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/fastq_list"
        },
        {
          "label": "fastq list rows",
          "doc": "Alternative to providing a file, one can instead provide a list of 'fastq-list-row' objects\n",
          "type": [
            "null",
            {
              "type": "array",
              "items": "#fastq-list-row__1.0.0.yaml/fastq-list-row"
            }
          ],
          "id": "#main/fastq_list_rows"
        },
        {
          "label": "hla allele frequency file",
          "doc": "Use the population-level HLA allele frequency file to break ties if one or more HLA allele produces the same or similar results.\nThe input HLA allele frequency file must be in CSV format and contain the HLA alleles and the occurrence frequency in population.\nIf --hla-allele-frequency-file is not specified, DRAGEN automatically uses hla_classI_allele_frequency.csv from /opt/edico/config/.\nPopulation-level allele frequencies can be obtained from the Allele Frequency Net database.\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/hla_allele_frequency_file"
        },
        {
          "label": "hla bed file",
          "doc": "Use the HLA region BED input file to specify the region to extract HLA reads from.\nDRAGEN HLA Caller parses the input file for regions within the BED file, and then\nextracts reads accordingly to align with the HLA allele reference.\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/hla_bed_file"
        },
        {
          "label": "hla min reads",
          "doc": "Set the minimum number of reads to align to HLA alleles to ensure sufficient coverage and perform HLA typing.\nThe default value is 1000 and suggested for WES samples. If using samples with less coverage, you can use a\nlower threshold value.\n",
          "type": [
            "null",
            "int"
          ],
          "id": "#main/hla_min_reads"
        },
        {
          "label": "hla reference file",
          "doc": "Use the HLA allele reference file to specify the reference alleles to align against.\nThe input HLA reference file must be in FASTA format and contain the protein sequence separated into exons.\nIf --hla-reference-file is not specified, DRAGEN uses hla_classI_ref_freq.fasta from /opt/edico/config/.\nThe reference HLA sequences are obtained from the IMGT/HLA database.\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/hla_reference_file"
        },
        {
          "label": "hla tiebreaker threshold",
          "doc": "If more than one allele has a similar number of reads aligned and there is not a clear indicator for the best allele,\nthe alleles are considered as ties. The HLA Caller places the tied alleles into a candidate set for tie breaking based\non the population allele frequency. If an allele has more than the specified fraction of reads aligned (normalized to\nthe top hit), then the allele is included into the candidate set for tie breaking. The default value is 0.97.\n",
          "type": [
            "null",
            "float"
          ],
          "id": "#main/hla_tiebreaker_threshold"
        },
        {
          "label": "hla zygosity threshold",
          "doc": "If the minor allele at a given locus has fewer reads mapped than a fraction of the read count of the major allele,\nthen the HLA Caller infers homozygosity for the given HLA-I gene. You can use this option to specify the fraction value.\nThe default value is 0.15.\n",
          "type": [
            "null",
            "float"
          ],
          "id": "#main/hla_zygosity_threshold"
        },
        {
          "label": "license instance id location",
          "doc": "You may wish to place your own in.\nOptional value, default set to /opt/instance-identity\nwhich is a path inside the dragen container\n",
          "type": [
            "null",
            "File",
            "string"
          ],
          "default": "/opt/instance-identity",
          "id": "#main/lic_instance_id_location"
        },
        {
          "label": "output format",
          "doc": "For mapping and aligning, the output is sorted and compressed into BAM format by default before saving to disk.\nYou can control the output format from the map/align stage with the --output-format <SAM|BAM|CRAM> option.\n",
          "type": [
            "null",
            {
              "type": "enum",
              "symbols": [
                "#main/output_format/SAM",
                "#main/output_format/BAM",
                "#main/output_format/CRAM"
              ]
            }
          ],
          "id": "#main/output_format"
        },
        {
          "label": "output prefix",
          "doc": "The prefix given to all output files\n",
          "type": "string",
          "id": "#main/output_prefix"
        },
        {
          "label": "qc coverage ignore overlaps",
          "doc": "Set to true to resolve all of the alignments for each fragment and avoid double-counting any\noverlapping bases. This might result in marginally longer run times.\nThis option also requires setting --enable-map-align=true.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/qc_coverage_ignore_overlaps"
        },
        {
          "label": "qc coverage region 1",
          "doc": "Generates coverage region report using bed file 1.\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/qc_coverage_region_1"
        },
        {
          "label": "qc coverage region 2",
          "doc": "Generates coverage region report using bed file 2.\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/qc_coverage_region_2"
        },
        {
          "label": "qc coverage region 3",
          "doc": "Generates coverage region report using bed file 3.\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/qc_coverage_region_3"
        },
        {
          "label": "reference tar",
          "doc": "Path to ref data tarball\n",
          "type": "File",
          "id": "#main/reference_tar"
        },
        {
          "label": "repeat genotype enable",
          "doc": "Enable DRAGEN repeat expansion detection\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/repeat_genotype_enable"
        },
        {
          "label": "repeat genotype specs",
          "doc": "Specifies the full path to the JSON file that contains the repeat variant catalog (specification) describing the loci to call.\n--repeat-genotype-specs is required for ExpansionHunter.\nIf the option is not provided,\nDRAGEN attempts to autodetect the applicable catalog file from /opt/edico/repeat-specs/ based on the reference provided.\n",
          "type": [
            "null",
            "File",
            "string"
          ],
          "id": "#main/repeat_genotype_specs"
        },
        {
          "label": "repeat genotype use catalog",
          "doc": "The repeat-specification (also called variant catalog) JSON file defines the repeat regions for ExpansionHunter to analyze.\nDefault repeat-specification for some pathogenic and polymorphic repeats are in the /opt/edico/repeat-specs/ directory,\nbased on the reference genome used with DRAGEN. Users can choose between any of the three default repeat-specification files\npackaged with DRAGEN using <default|default_plus_smn|expanded>\n",
          "type": [
            "null",
            {
              "type": "enum",
              "symbols": [
                "#main/repeat_genotype_use_catalog/default",
                "#main/repeat_genotype_use_catalog/default_plus_smn",
                "#main/repeat_genotype_use_catalog/expanded"
              ]
            }
          ],
          "id": "#main/repeat_genotype_use_catalog"
        },
        {
          "label": "sample sex",
          "doc": "Specifies the sex of a sample\n",
          "type": [
            "null",
            {
              "type": "enum",
              "symbols": [
                "#main/sample_sex/male",
                "#main/sample_sex/female"
              ]
            }
          ],
          "id": "#main/sample_sex"
        },
        {
          "label": "sv call regions bed",
          "doc": "Specifies a BED file containing the set of regions to call.\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/sv_call_regions_bed"
        },
        {
          "label": "sv discovery",
          "doc": "Enable SV discovery. This flag can be set to false only when --sv-forcegt-vcf is used.\nWhen set to false, SV discovery is disabled and only the forced genotyping input variants\nare processed. The default is true.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/sv_discovery"
        },
        {
          "label": "sv enable liquid tumor mode",
          "doc": "Enable liquid tumor mode.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/sv_enable_liquid_tumor_mode"
        },
        {
          "label": "sv exome",
          "doc": "Set to true to configure the variant caller for targeted sequencing inputs,\nwhich includes disabling high depth filters.\nIn integrated mode, the default is to autodetect targeted sequencing input,\nand in standalone mode the default is false.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/sv_exome"
        },
        {
          "label": "sv forcegt vcf",
          "doc": "Specify a VCF of structural variants for forced genotyping. The variants are scored and emitted\nin the output VCF even if not found in the sample data.\nThe variants are merged with any additional variants discovered directly from the sample data.\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/sv_forcegt_vcf"
        },
        {
          "label": "sv output contigs",
          "doc": "Set to true to have assembled contig sequences output in a VCF file. The default is false.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/sv_output_contigs"
        },
        {
          "label": "sv region",
          "doc": "Limit the analysis to a specified region of the genome for debugging purposes.\nThis option can be specified multiple times to build a list of regions.\nThe value must be in the format \"chr:startPos-endPos\"..\n",
          "type": [
            "null",
            "string"
          ],
          "id": "#main/sv_region"
        },
        {
          "label": "sv use overlap pair evidence",
          "doc": "Allow overlapping read pairs to be considered as evidence.\nBy default, DRAGEN uses autodetect on the fraction of overlapping read pairs if <20%.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/sv_se_overlap_pair_evidence"
        },
        {
          "label": "sv tin contam tolerance",
          "doc": "Set the Tumor-in-Normal (TiN) contamination tolerance level.\nYou can enter any value between 0-1. The default maximum TiN contamination tolerance is 0.15.\n",
          "type": [
            "null",
            "float"
          ],
          "id": "#main/sv_tin_contam_tolerance"
        },
        {
          "label": "vc decoy contigs",
          "doc": "The --vc-decoy-contigs option specifies a comma-separated list of contigs to skip during variant calling.\nThis option can be set in the configuration file.\n",
          "type": [
            "null",
            "string"
          ],
          "id": "#main/vc_decoy_contigs"
        },
        {
          "label": "vc emit ref confidence",
          "doc": "A genomic VCF (gVCF) file contains information on variants and positions determined to be homozygous to the reference genome.\nFor homozygous regions, the gVCF file includes statistics that indicate how well reads support the absence of variants or\nalternative alleles. To enable gVCF output, set to GVCF. By default, contiguous runs of homozygous reference calls with similar\nscores are collapsed into blocks (hom-ref blocks). Hom-ref blocks save disk space and processing time of downstream analysis tools.\nDRAGEN recommends using the default mode. To produce unbanded output, set --vc-emit-ref-confidence to BP_RESOLUTION.\n",
          "type": [
            "null",
            "string"
          ],
          "id": "#main/vc_emit_ref_confidence"
        },
        {
          "label": "vc enable baf",
          "doc": "Enable or disable B-allele frequency output. Enabled by default.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/vc_enable_baf"
        },
        {
          "label": "vc enable decoy contigs",
          "doc": "If --vc-enable-decoy-contigs is set to true, variant calls on the decoy contigs are enabled.\nThe default value is false.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/vc_enable_decoy_contigs"
        },
        {
          "label": "vc enable gatk acceleration",
          "doc": "If is set to true, the variant caller runs in GATK mode\n(concordant with GATK 3.7 in germline mode and GATK 4.0 in somatic mode).\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/vc_enable_gatk_acceleration"
        },
        {
          "label": "vc enable phasing",
          "doc": "The -vc-enable-phasing option enables variants to be phased when possible. The default value is true.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/vc_enable_phasing"
        },
        {
          "label": "vc enable roh",
          "doc": "Enable or disable the ROH caller by setting this option to true or false. Enabled by default for human autosomes only.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/vc_enable_roh"
        },
        {
          "label": "vc enable sex chr diploid",
          "doc": "For male samples in germline calling mode, DRAGEN calls potential mosaic variants in non-PAR regions of sex chromosomes.\nA variant is called as mosaic when the allele frequency (FORMAT/AF) is below 85% or if multiple alt alleles are called,\nsuggesting incompatibility with the haploid assumption. The GT field for bi-allelic mosaic variants is \"0/1\",\ndenoting a mixture of reference and alt alleles, as opposed to the regular GT of \"1\" for haploid variants.\nThe GT field for multi-allelic mosaic variants is \"1/2\" in VCF.\nYou can disable the calling of mosaic variants by setting --vc-enable-sex-chr-diploid to false.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/vc_enable_sex_chr_diploid"
        },
        {
          "label": "vc enable vcf output",
          "doc": "The -vc-enable-vcf-output option enables VCF file output during a gVCF run. The default value is false.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/vc_enable_vcf_output"
        },
        {
          "label": "vc forcegt vcf",
          "doc": "AGENsupports force genotyping (ForceGT) for Germline SNV variant calling.\nTo use ForceGT, use the --vc-forcegt-vcf option with a list of small variants to force genotype.\nThe input list of small variants can be a .vcf or .vcf.gz file.\n\nThe current limitations of ForceGT are as follows:\n*\tForceGT is supported for Germline SNV variant calling in the V3 mode.\nThe V1, V2, and V2+ modes are not supported.\n*\tForceGT is not supported for Somatic SNV variant calling.\n*\tForceGT variants do not propagate through Joint Genotyping.\n",
          "type": [
            "null",
            "File"
          ],
          "secondaryFiles": [
            {
              "pattern": ".tbi",
              "required": true
            }
          ],
          "id": "#main/vc_forcegt_vcf"
        },
        {
          "label": "vc haploid call af threshold",
          "doc": "Option --vc-haploid-call-af-threshold=<af_threshold> to control threshold.\n* Diploid model is applied to haploid (chrX/Y, non-PAR) regions in male samples.\n* Variants with only one alt allele and with AF>=85% are rewritten to haploid calls.\n* The potential mosaic calls with AF<85% will have GT of \"0/1\" and an INFO tag of\n  \"MOSAIC\" will be added.\n",
          "type": [
            "null",
            "float"
          ],
          "id": "#main/vc_haploid_call_af_threshold"
        },
        {
          "label": "vc hard fitler",
          "doc": "DRAGEN provides post-VCF variant filtering based on annotations present in the VCF records.\nHowever, due to the nature of DRAGEN's algorithms, which incorporate the hypothesis of correlated errors\nfrom within the core of variant caller, the pipeline has improved capabilities in distinguishing\nthe true variants from noise, and therefore the dependency on post-VCF filtering is substantially reduced.\nFor this reason, the default post-VCF filtering in DRAGEN is very simple\n",
          "type": [
            "null",
            "string"
          ],
          "id": "#main/vc_hard_filter"
        },
        {
          "label": "vc max reads per active region",
          "doc": "specifies the maximum number of reads covering a given active region.\nDefault is 10000 for the germline workflow\n",
          "type": [
            "null",
            "int"
          ],
          "id": "#main/vc_max_reads_per_active_region"
        },
        {
          "label": "vc max reads per raw region",
          "doc": "specifies the maximum number of reads covering a given raw region.\nDefault is 30000 for the germline workflow\n",
          "type": [
            "null",
            "int"
          ],
          "id": "#main/vc_max_reads_per_raw_region"
        },
        {
          "label": "vc ml enable recalibration",
          "doc": "DRAGEN employs machine learning-based variant recalibration (DRAGEN-ML) for germline SNV VC.\nVariant calling accuracy is improved using powerful and efficient machine learning techniques that augment the variant caller,\nby exploiting more of the available read and context information that does not easily integrate into the Bayesian processing\nused by the haplotype variant caller.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/vc_ml_enable_recalibration"
        },
        {
          "label": "vc remove all soft clips",
          "doc": "If is set to true, the variant caller does not use soft clips of reads to determine variants.\n",
          "type": [
            "null",
            "boolean"
          ],
          "id": "#main/vc_remove_all_soft_clips"
        },
        {
          "label": "vc roh blacklist bed",
          "doc": "If provided, the ROH caller ignores variants that are contained in any region in the blacklist BED file.\nDRAGEN distributes blacklist files for all popular human genomes and automatically selects a blacklist to\nmatch the genome in use, unless this option is used explicitly select a file.\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/vc_roh_blacklist_bed"
        },
        {
          "label": "vc target bed",
          "doc": "This is an optional command line input that restricts processing of the small variant caller,\ntarget bed related coverage, and callability metrics to regions specified in a BED file.\n",
          "type": [
            "null",
            "File"
          ],
          "id": "#main/vc_target_bed"
        },
        {
          "label": "vc target bed padding",
          "doc": "This is an optional command line input that can be used to pad all of the target\nBED regions with the specified value.\nFor example, if a BED region is 1:1000-2000 and a padding value of 100 is used,\nit is equivalent to using a BED region of 1:900-2100 and a padding value of 0.\n\nAny padding added to --vc-target-bed-padding is used by the small variant caller\nand by the target bed coverage/callability reports. The default padding is 0.\n",
          "type": [
            "null",
            "int"
          ],
          "id": "#main/vc_target_bed_padding"
        },
        {
          "label": "vc target coverage",
          "doc": "The --vc-target-coverage option specifies the target coverage for down-sampling.\nThe default value is 500 for germline mode and 50 for somatic mode.\n",
          "type": [
            "null",
            "int"
          ],
          "id": "#main/vc_target_coverage"
        }
      ],
      "steps": [
        {
          "label": "dragen qc step",
          "doc": "The dragen qc step - this takes in an array of dirs\n",
          "in": [
            {
              "source": "#main/run_dragen_germline_step/dragen_germline_output_directory",
              "valueFrom": "${\n  return [self];\n}\n",
              "id": "#main/dragen_qc_step/input_directories"
            },
            {
              "source": "#main/output_prefix",
              "valueFrom": "$(self)_dragen_germline_multiqc",
              "id": "#main/dragen_qc_step/output_directory_name"
            },
            {
              "source": "#main/output_prefix",
              "valueFrom": "$(self)_dragen_germline_multiqc.html",
              "id": "#main/dragen_qc_step/output_filename"
            },
            {
              "source": "#main/output_prefix",
              "valueFrom": "UMCCR MultiQC Dragen Germline Report for $(self)",
              "id": "#main/dragen_qc_step/title"
            }
          ],
          "out": [
            {
              "id": "#main/dragen_qc_step/output_directory"
            }
          ],
          "run": "#multiqc__1.25.1.cwl",
          "id": "#main/dragen_qc_step"
        },
        {
          "label": "run dragen germline step",
          "doc": "Runs the dragen germline workflow on the FPGA.\nTakes in either a fastq list as a file or a fastq_list_rows schema object\n",
          "in": [
            {
              "source": "#main/bam_input",
              "id": "#main/run_dragen_germline_step/bam_input"
            },
            {
              "source": "#main/cnv_enable_self_normalization",
              "id": "#main/run_dragen_germline_step/cnv_enable_self_normalization"
            },
            {
              "source": "#main/cram_input",
              "id": "#main/run_dragen_germline_step/cram_input"
            },
            {
              "source": "#main/cram_reference",
              "id": "#main/run_dragen_germline_step/cram_reference"
            },
            {
              "source": "#main/dbsnp_annotation",
              "id": "#main/run_dragen_germline_step/dbsnp_annotation"
            },
            {
              "source": "#main/dedup_min_qual",
              "id": "#main/run_dragen_germline_step/dedup_min_qual"
            },
            {
              "source": "#main/enable_cnv",
              "id": "#main/run_dragen_germline_step/enable_cnv"
            },
            {
              "source": "#main/enable_duplicate_marking",
              "id": "#main/run_dragen_germline_step/enable_duplicate_marking"
            },
            {
              "source": "#main/enable_hla",
              "id": "#main/run_dragen_germline_step/enable_hla"
            },
            {
              "source": "#main/enable_map_align_output",
              "id": "#main/run_dragen_germline_step/enable_map_align_output"
            },
            {
              "source": "#main/enable_pgx",
              "id": "#main/run_dragen_germline_step/enable_pgx"
            },
            {
              "source": "#main/enable_sv",
              "id": "#main/run_dragen_germline_step/enable_sv"
            },
            {
              "source": "#main/enable_targeted",
              "id": "#main/run_dragen_germline_step/enable_targeted"
            },
            {
              "source": "#main/fastq_list",
              "id": "#main/run_dragen_germline_step/fastq_list"
            },
            {
              "source": "#main/fastq_list_rows",
              "id": "#main/run_dragen_germline_step/fastq_list_rows"
            },
            {
              "source": "#main/hla_allele_frequency_file",
              "id": "#main/run_dragen_germline_step/hla_allele_frequency_file"
            },
            {
              "source": "#main/hla_bed_file",
              "id": "#main/run_dragen_germline_step/hla_bed_file"
            },
            {
              "source": "#main/hla_min_reads",
              "id": "#main/run_dragen_germline_step/hla_min_reads"
            },
            {
              "source": "#main/hla_reference_file",
              "id": "#main/run_dragen_germline_step/hla_reference_file"
            },
            {
              "source": "#main/hla_tiebreaker_threshold",
              "id": "#main/run_dragen_germline_step/hla_tiebreaker_threshold"
            },
            {
              "source": "#main/hla_zygosity_threshold",
              "id": "#main/run_dragen_germline_step/hla_zygosity_threshold"
            },
            {
              "source": "#main/lic_instance_id_location",
              "id": "#main/run_dragen_germline_step/lic_instance_id_location"
            },
            {
              "source": "#main/output_prefix",
              "valueFrom": "$(self)_dragen_germline",
              "id": "#main/run_dragen_germline_step/output_directory"
            },
            {
              "source": "#main/output_prefix",
              "id": "#main/run_dragen_germline_step/output_file_prefix"
            },
            {
              "source": "#main/output_format",
              "id": "#main/run_dragen_germline_step/output_format"
            },
            {
              "source": "#main/qc_coverage_ignore_overlaps",
              "id": "#main/run_dragen_germline_step/qc_coverage_ignore_overlaps"
            },
            {
              "source": "#main/qc_coverage_region_1",
              "id": "#main/run_dragen_germline_step/qc_coverage_region_1"
            },
            {
              "source": "#main/qc_coverage_region_2",
              "id": "#main/run_dragen_germline_step/qc_coverage_region_2"
            },
            {
              "source": "#main/qc_coverage_region_3",
              "id": "#main/run_dragen_germline_step/qc_coverage_region_3"
            },
            {
              "source": "#main/reference_tar",
              "id": "#main/run_dragen_germline_step/reference_tar"
            },
            {
              "source": "#main/repeat_genotype_enable",
              "id": "#main/run_dragen_germline_step/repeat_genotype_enable"
            },
            {
              "source": "#main/repeat_genotype_specs",
              "id": "#main/run_dragen_germline_step/repeat_genotype_specs"
            },
            {
              "source": "#main/repeat_genotype_use_catalog",
              "id": "#main/run_dragen_germline_step/repeat_genotype_use_catalog"
            },
            {
              "source": "#main/sample_sex",
              "id": "#main/run_dragen_germline_step/sample_sex"
            },
            {
              "source": "#main/sv_call_regions_bed",
              "id": "#main/run_dragen_germline_step/sv_call_regions_bed"
            },
            {
              "source": "#main/sv_discovery",
              "id": "#main/run_dragen_germline_step/sv_discovery"
            },
            {
              "source": "#main/sv_enable_liquid_tumor_mode",
              "id": "#main/run_dragen_germline_step/sv_enable_liquid_tumor_mode"
            },
            {
              "source": "#main/sv_exome",
              "id": "#main/run_dragen_germline_step/sv_exome"
            },
            {
              "source": "#main/sv_forcegt_vcf",
              "id": "#main/run_dragen_germline_step/sv_forcegt_vcf"
            },
            {
              "source": "#main/sv_output_contigs",
              "id": "#main/run_dragen_germline_step/sv_output_contigs"
            },
            {
              "source": "#main/sv_region",
              "id": "#main/run_dragen_germline_step/sv_region"
            },
            {
              "source": "#main/sv_se_overlap_pair_evidence",
              "id": "#main/run_dragen_germline_step/sv_se_overlap_pair_evidence"
            },
            {
              "source": "#main/sv_tin_contam_tolerance",
              "id": "#main/run_dragen_germline_step/sv_tin_contam_tolerance"
            },
            {
              "source": "#main/vc_decoy_contigs",
              "id": "#main/run_dragen_germline_step/vc_decoy_contigs"
            },
            {
              "source": "#main/vc_emit_ref_confidence",
              "id": "#main/run_dragen_germline_step/vc_emit_ref_confidence"
            },
            {
              "source": "#main/vc_enable_baf",
              "id": "#main/run_dragen_germline_step/vc_enable_baf"
            },
            {
              "source": "#main/vc_enable_decoy_contigs",
              "id": "#main/run_dragen_germline_step/vc_enable_decoy_contigs"
            },
            {
              "source": "#main/vc_enable_gatk_acceleration",
              "id": "#main/run_dragen_germline_step/vc_enable_gatk_acceleration"
            },
            {
              "source": "#main/vc_enable_phasing",
              "id": "#main/run_dragen_germline_step/vc_enable_phasing"
            },
            {
              "source": "#main/vc_enable_roh",
              "id": "#main/run_dragen_germline_step/vc_enable_roh"
            },
            {
              "source": "#main/vc_enable_sex_chr_diploid",
              "id": "#main/run_dragen_germline_step/vc_enable_sex_chr_diploid"
            },
            {
              "source": "#main/vc_enable_vcf_output",
              "id": "#main/run_dragen_germline_step/vc_enable_vcf_output"
            },
            {
              "source": "#main/vc_haploid_call_af_threshold",
              "id": "#main/run_dragen_germline_step/vc_haploid_call_af_threshold"
            },
            {
              "source": "#main/vc_hard_filter",
              "id": "#main/run_dragen_germline_step/vc_hard_filter"
            },
            {
              "source": "#main/vc_max_reads_per_active_region",
              "id": "#main/run_dragen_germline_step/vc_max_reads_per_active_region"
            },
            {
              "source": "#main/vc_max_reads_per_raw_region",
              "id": "#main/run_dragen_germline_step/vc_max_reads_per_raw_region"
            },
            {
              "source": "#main/vc_ml_enable_recalibration",
              "id": "#main/run_dragen_germline_step/vc_ml_enable_recalibration"
            },
            {
              "source": "#main/vc_remove_all_soft_clips",
              "id": "#main/run_dragen_germline_step/vc_remove_all_soft_clips"
            },
            {
              "source": "#main/vc_roh_blacklist_bed",
              "id": "#main/run_dragen_germline_step/vc_roh_blacklist_bed"
            },
            {
              "source": "#main/vc_target_bed",
              "id": "#main/run_dragen_germline_step/vc_target_bed"
            },
            {
              "source": "#main/vc_target_bed_padding",
              "id": "#main/run_dragen_germline_step/vc_target_bed_padding"
            },
            {
              "source": "#main/vc_target_coverage",
              "id": "#main/run_dragen_germline_step/vc_target_coverage"
            }
          ],
          "out": [
            {
              "id": "#main/run_dragen_germline_step/dragen_germline_output_directory"
            },
            {
              "id": "#main/run_dragen_germline_step/dragen_bam_out"
            },
            {
              "id": "#main/run_dragen_germline_step/dragen_vcf_out"
            }
          ],
          "run": "#dragen-germline__4.3.6.cwl",
          "id": "#main/run_dragen_germline_step"
        }
      ],
      "outputs": [
        {
          "label": "dragen bam out",
          "doc": "The output bam file, exists only if --enable-map-align-output is set to true\n",
          "type": [
            "null",
            "File"
          ],
          "secondaryFiles": [
            {
              "pattern": ".bai",
              "required": null
            }
          ],
          "outputSource": "#main/run_dragen_germline_step/dragen_bam_out",
          "id": "#main/dragen_bam_out"
        },
        {
          "label": "dragen germline output directory",
          "doc": "The output directory containing all germline output files\n",
          "type": "Directory",
          "outputSource": "#main/run_dragen_germline_step/dragen_germline_output_directory",
          "id": "#main/dragen_germline_output_directory"
        },
        {
          "label": "dragen vcf out",
          "doc": "The output germline vcf file\n",
          "type": [
            "null",
            "File"
          ],
          "secondaryFiles": [
            {
              "pattern": ".tbi",
              "required": null
            }
          ],
          "outputSource": "#main/run_dragen_germline_step/dragen_vcf_out",
          "id": "#main/dragen_vcf_out"
        },
        {
          "label": "multiqc output directory",
          "doc": "The output directory for multiqc\n",
          "type": "Directory",
          "outputSource": "#main/dragen_qc_step/output_directory",
          "id": "#main/multiqc_output_directory"
        }
      ],
      "https://schema.org/author": {
        "class": "https://schema.org/Person",
        "https://schema.org/name": "Alexis Lucattini",
        "https://schema.org/email": "Alexis.Lucattini@umccr.org"
      }
    }
  ],
  "cwlVersion": "v1.1",
  "$schemas": [
    "https://schema.org/version/latest/schemaorg-current-http.rdf"
  ],
  "$namespaces": {
    "s": "https://schema.org/"
  }
}